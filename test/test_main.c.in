#include <time.h>

#include "test_common.h"
#include "util.h"

%%TEST_DECLARATIONS%%

char *test_msg(int result) {
  switch (result) {
    case 0:
      return "\e[1;32mOK\e[0m";
    case 1:
      return "\e[1;31mFAILED\e[0m"; 
    case 2:
      return "\e[1;33mSKIPPED\e[0m"; 
  }
}

int main(int argc, char **argv) {
  testing_results_t results;
  results.n_tests = %%N_TESTS%%;
  results.tests = (test_info_t*)malloc(results.n_tests*sizeof(test_info_t));
  int (*test_list[])() = %%TEST_LIST%%;
  char *test_names[] = %%TEST_NAMES%%;
  int i, rc;
  unsigned int n_success = 0;
  unsigned int n_skipped = 0;
  time_t start_time, end_time;
  if (argc == 2) {
    parse_test_list(&results, argv[1]);
  }
  else {
    parse_test_list(&results, NULL);
  }
  printf("Running %d tests\n", results.n_tests);
  for (i = 0; i < results.n_tests; i++) {
    test_info_t *current_test = &(results.tests[i]);
    printf("Test %d/%d (%s):", i+1, results.n_tests, test_names[i]);
    fflush(stdout);
    
    start_time = time(NULL);
    if (current_test->run_test) {
      rc = (*test_list[i])();
    }
    else {
      rc = TEST_SKIPPED;
    }
    end_time = time(NULL);
    current_test->test_name = test_names[i];
    current_test->result = rc;
    if (rc == TEST_SUCCESS) {
      n_success++;
    }
    else if (rc == TEST_SKIPPED) {
      n_skipped++;
    }
    current_test->elapsed_time = difftime(end_time, start_time);
    current_test->completed = true;
    printf(" %s (%.2f seconds)\n",  \
      test_msg(rc), \
      current_test->elapsed_time);
  }
  printf("%d/%d tests passed (%d skipped)\n", n_success, results.n_tests - n_skipped, n_skipped);
  print_results_json("test_results.json", &results);
  free(results.tests);
  return (n_success == results.n_tests - n_skipped) ? 0 : 1;
}
