cmake_minimum_required(VERSION 3.22)

# check if we are inside of a git repository
execute_process(COMMAND "git" "status"
  RESULT_VARIABLE GIT_STATUS_RET OUTPUT_QUIET ERROR_QUIET)

if (GIT_STATUS_RET EQUAL "0")
  # get git commit hash to put into the version string
  execute_process(COMMAND "git" "rev-parse" "--short" "HEAD" 
    OUTPUT_VARIABLE HIEMAL_GIT_COMMIT 
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  execute_process(COMMAND "git" "rev-parse" "HEAD" 
    OUTPUT_VARIABLE HIEMAL_GIT_COMMIT_LONG
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  project(HIEMAL VERSION 0.1.0)
endif()

add_library(hiemal SHARED)
target_include_directories(hiemal PRIVATE ${CMAKE_BINARY_DIR}/include)
target_link_libraries(hiemal m)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(WITH_ALSA "ON" CACHE BOOL "Use ALSA")  
  find_package(ALSA)
  if(NOT ALSA_FOUND)
    set(WITH_ALSA "OFF")
  endif()
endif()

set(WITH_PYTHON "OFF" CACHE BOOL "Build python module")  
find_package (Python COMPONENTS Interpreter Development)
if(NOT Python_FOUND)
  set(WITH_PYTHON "OFF")
endif()

if (WITH_ALSA)
  target_link_libraries(hiemal asound)
endif()

add_subdirectory(src/core)
add_subdirectory(src/python)
add_subdirectory(docs)
add_subdirectory(test)

file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/include)
configure_file(cmake/cmake_info.h.in include/cmake_info.h @ONLY)

# config summary
message(STATUS "")
message(STATUS "================== Configuration Summary ==================")
message(STATUS "General:")
message(STATUS "  Hiemal version: ${HIEMAL_VERSION}")
message(STATUS "  CMake version: ${CMAKE_VERSION}")
message(STATUS "  Platform: ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}")
if (GIT_STATUS_RET EQUAL "0")
  message(STATUS "  Found git repository: YES")
  message(STATUS "    Git commit: ${HIEMAL_GIT_COMMIT}")
else()
  message(STATUS "  Found git repository: NO")
endif()
message(STATUS "  Install location: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "")
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  message(STATUS "Linux-specific options:")
  if(WITH_ALSA)
    message(STATUS "  ALSA: YES")
  else()
    message(STATUS "  ALSA: NO")
  endif()
  message(STATUS "")
endif()
if (NOT WITH_PYTHON)
  message(STATUS "Python: NO")
else()
  message(STATUS "Python: YES")
  message(STATUS "  Interpreter: ${Python_EXECUTABLE}")
  message(STATUS "  Include Dir: ${Python_INCLUDE_DIRS}")
  message(STATUS "  Library: ${Python_LIBRARIES}")
endif()
message(STATUS "")
message(STATUS "Documentation:")
if (SPHINX_COMMIT_INFO)
  message(STATUS "  Sphinx add commit info to footer: YES")
else()
  message(STATUS "  Sphinx add commit info to footer: NO")
endif()
message(STATUS "")